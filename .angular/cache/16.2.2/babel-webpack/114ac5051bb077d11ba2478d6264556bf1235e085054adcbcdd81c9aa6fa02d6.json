{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let BookTicketsComponent = class BookTicketsComponent {\n  constructor(bookingService, fb, http, seatService, re) {\n    this.bookingService = bookingService;\n    this.fb = fb;\n    this.http = http;\n    this.seatService = seatService;\n    this.re = re;\n    this.selectedSeats = [];\n    this.bookingForms = [];\n  }\n  ngOnInit() {\n    // Get the selected seats data directly from the service\n    this.selectedSeats = this.bookingService.getSelectedSeatsData();\n    this.initializeForms();\n  }\n  initializeForms() {\n    // Clear existing forms\n    this.bookingForms = [];\n    // Create a form for each selected seat\n    this.selectedSeats.forEach(seat => {\n      const form = this.fb.group({\n        passengerName: [seat.passengerName || '', Validators.required],\n        passengerAge: [seat.passengerAge || 0, [Validators.required, Validators.min(1)]],\n        passengerGender: [seat.passengerGender || '', Validators.required]\n      });\n      this.bookingForms.push(form);\n    });\n  }\n  onSubmit() {\n    // Handle form submission here, e.g., send passenger data to the server\n    if (this.bookingForms.every(form => form.valid)) {\n      const passengerDataArray = this.bookingForms.map((form, index) => ({\n        seatName: this.selectedSeats[index].name,\n        seatPrice: this.selectedSeats[index].seatPrice,\n        passengerData: form.value\n      }));\n      // Send passengerDataArray to the server or perform any other required actions\n      // console.log(this.bookingForms);  \n      this.bookingService.confirmSeats(passengerDataArray);\n      this.r;\n    }\n  }\n};\nBookTicketsComponent = __decorate([Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.scss']\n})], BookTicketsComponent);","map":{"version":3,"names":["Component","Validators","BookTicketsComponent","constructor","bookingService","fb","http","seatService","re","selectedSeats","bookingForms","ngOnInit","getSelectedSeatsData","initializeForms","forEach","seat","form","group","passengerName","required","passengerAge","min","passengerGender","push","onSubmit","every","valid","passengerDataArray","map","index","seatName","name","seatPrice","passengerData","value","confirmSeats","r","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Web\\academy-project\\src\\app\\book-tickets\\book-tickets.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { BookingService } from '../booking.service';\r\nimport { SeatService } from '../seat.service';\r\nimport { Seat } from '../seats/seats.component';\r\n\r\n@Component({\r\n  selector: 'app-book-tickets',\r\n  templateUrl: './book-tickets.component.html',\r\n  styleUrls: ['./book-tickets.component.scss'],\r\n})\r\nexport class BookTicketsComponent implements OnInit {\r\n  selectedSeats: Seat[] = [];\r\n  bookingForms: FormGroup[] = [];\r\n\r\n  constructor(private bookingService: BookingService, private fb: FormBuilder, private http: HttpClient, private seatService: SeatService, private re) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get the selected seats data directly from the service\r\n    this.selectedSeats = this.bookingService.getSelectedSeatsData();\r\n    this.initializeForms();\r\n  }\r\n\r\n  initializeForms() {\r\n    // Clear existing forms\r\n    this.bookingForms = [];\r\n\r\n    // Create a form for each selected seat\r\n    this.selectedSeats.forEach((seat) => {\r\n      const form = this.fb.group({\r\n        passengerName: [seat.passengerName || '', Validators.required],\r\n        passengerAge: [seat.passengerAge || 0, [Validators.required, Validators.min(1)]],\r\n        passengerGender: [seat.passengerGender || '', Validators.required],\r\n      });\r\n      this.bookingForms.push(form);\r\n  \r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    // Handle form submission here, e.g., send passenger data to the server\r\n    if (this.bookingForms.every((form) => form.valid)) {\r\n      const passengerDataArray = this.bookingForms.map((form, index) => ({\r\n        seatName: this.selectedSeats[index].name,\r\n        seatPrice: this.selectedSeats[index].seatPrice,\r\n        passengerData: form.value,\r\n      }));\r\n\r\n      // Send passengerDataArray to the server or perform any other required actions\r\n      // console.log(this.bookingForms);  \r\n      this.bookingService.confirmSeats(passengerDataArray);\r\n      this.r\r\n      \r\n\r\n\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAU5D,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAI/BC,YAAoBC,cAA8B,EAAUC,EAAe,EAAUC,IAAgB,EAAUC,WAAwB,EAAUC,EAAE;IAA/H,KAAAJ,cAAc,GAAdA,cAAc;IAA0B,KAAAC,EAAE,GAAFA,EAAE;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,EAAE,GAAFA,EAAE;IAHnJ,KAAAC,aAAa,GAAW,EAAE;IAC1B,KAAAC,YAAY,GAAgB,EAAE;EAEwH;EAEtJC,QAAQA,CAAA;IACN;IACA,IAAI,CAACF,aAAa,GAAG,IAAI,CAACL,cAAc,CAACQ,oBAAoB,EAAE;IAC/D,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAA,eAAeA,CAAA;IACb;IACA,IAAI,CAACH,YAAY,GAAG,EAAE;IAEtB;IACA,IAAI,CAACD,aAAa,CAACK,OAAO,CAAEC,IAAI,IAAI;MAClC,MAAMC,IAAI,GAAG,IAAI,CAACX,EAAE,CAACY,KAAK,CAAC;QACzBC,aAAa,EAAE,CAACH,IAAI,CAACG,aAAa,IAAI,EAAE,EAAEjB,UAAU,CAACkB,QAAQ,CAAC;QAC9DC,YAAY,EAAE,CAACL,IAAI,CAACK,YAAY,IAAI,CAAC,EAAE,CAACnB,UAAU,CAACkB,QAAQ,EAAElB,UAAU,CAACoB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAChFC,eAAe,EAAE,CAACP,IAAI,CAACO,eAAe,IAAI,EAAE,EAAErB,UAAU,CAACkB,QAAQ;OAClE,CAAC;MACF,IAAI,CAACT,YAAY,CAACa,IAAI,CAACP,IAAI,CAAC;IAE9B,CAAC,CAAC;EACJ;EAEAQ,QAAQA,CAAA;IACN;IACA,IAAI,IAAI,CAACd,YAAY,CAACe,KAAK,CAAET,IAAI,IAAKA,IAAI,CAACU,KAAK,CAAC,EAAE;MACjD,MAAMC,kBAAkB,GAAG,IAAI,CAACjB,YAAY,CAACkB,GAAG,CAAC,CAACZ,IAAI,EAAEa,KAAK,MAAM;QACjEC,QAAQ,EAAE,IAAI,CAACrB,aAAa,CAACoB,KAAK,CAAC,CAACE,IAAI;QACxCC,SAAS,EAAE,IAAI,CAACvB,aAAa,CAACoB,KAAK,CAAC,CAACG,SAAS;QAC9CC,aAAa,EAAEjB,IAAI,CAACkB;OACrB,CAAC,CAAC;MAEH;MACA;MACA,IAAI,CAAC9B,cAAc,CAAC+B,YAAY,CAACR,kBAAkB,CAAC;MACpD,IAAI,CAACS,CAAC;;EAKV;CACD;AA9CYlC,oBAAoB,GAAAmC,UAAA,EALhCrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWtC,oBAAoB,CA8ChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}