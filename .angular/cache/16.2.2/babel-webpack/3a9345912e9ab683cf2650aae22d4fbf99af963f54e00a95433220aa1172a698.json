{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nexport let BookTicketsComponent = class BookTicketsComponent {\n  constructor(bookingService, fb, http, seatService, router, authService) {\n    this.bookingService = bookingService;\n    this.fb = fb;\n    this.http = http;\n    this.seatService = seatService;\n    this.router = router;\n    this.authService = authService;\n    this.selectedSeats = [];\n    this.bookingForms = [];\n    this.genderArray = [];\n  }\n  ngOnInit() {\n    // Get the selected seats data directly from the service\n    this.selectedSeats = this.bookingService.getSelectedSeatsData();\n    this.initializeForms();\n  }\n  initializeForms() {\n    this.bookingForms = [];\n    function nameValidator(control) {\n      const name = control.value;\n      if (!name || name.length < 3) {\n        return {\n          'minLength': true\n        };\n      }\n      if (!/^[a-zA-Z\\s]*$/.test(name)) {\n        return {\n          'invalidChars': true\n        };\n      }\n      return null;\n    }\n    this.selectedSeats.forEach(seat => {\n      const isLadiesSeat = seat.seatStatus === 'ladiesSelected';\n      const isGentsSeat = seat.seatStatus === 'gentsSelected';\n      // console.log(isGentsSeat);\n      if (seat.seatStatus !== 'selected') {\n        this.gender = isGentsSeat ? 'male' : 'female';\n        this.genderArray.push(this.gender);\n        // this.bookingService.setGender(this.gender);\n      }\n\n      const form = new FormGroup({\n        passengerName: new FormControl(seat.passengerName || '', [Validators.required, nameValidator]),\n        passengerAge: new FormControl(seat.passengerAge || '', [Validators.required, Validators.min(5), Validators.max(125)]),\n        passengerGender: new FormControl({\n          value: this.gender || '',\n          disabled: isLadiesSeat || isGentsSeat\n        }, Validators.required)\n      });\n      this.bookingForms.push(form);\n    });\n    this.bookingService.setGender(this.genderArray);\n  }\n  logout() {\n    this.authService.logout();\n  }\n  onSubmit() {\n    if (this.bookingForms.every(form => form.valid)) {\n      const passengerDataArray = this.bookingForms.map((form, index) => ({\n        seatName: this.selectedSeats[index].name,\n        seatPrice: this.selectedSeats[index].seatPrice,\n        passengerData: form.value\n      }));\n      // Send passengerDataArray to the server or perform any other required actions\n      // console.log(this.bookingForms);  \n      this.bookingService.confirmSeats(passengerDataArray);\n      this.router.navigate(['/summary']);\n    }\n  }\n};\nBookTicketsComponent = __decorate([Component({\n  selector: 'app-book-tickets',\n  templateUrl: './book-tickets.component.html',\n  styleUrls: ['./book-tickets.component.scss']\n})], BookTicketsComponent);","map":{"version":3,"names":["Component","FormGroup","Validators","FormControl","BookTicketsComponent","constructor","bookingService","fb","http","seatService","router","authService","selectedSeats","bookingForms","genderArray","ngOnInit","getSelectedSeatsData","initializeForms","nameValidator","control","name","value","length","test","forEach","seat","isLadiesSeat","seatStatus","isGentsSeat","gender","push","form","passengerName","required","passengerAge","min","max","passengerGender","disabled","setGender","logout","onSubmit","every","valid","passengerDataArray","map","index","seatName","seatPrice","passengerData","confirmSeats","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Web\\academy-project\\src\\app\\book-tickets\\book-tickets.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidationErrors, FormControl } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { BookingService } from '../booking.service';\r\nimport { SeatService } from '../seat.service';\r\nimport { Seat } from '../seats/seats.component';\r\n\r\n@Component({\r\n  selector: 'app-book-tickets',\r\n  templateUrl: './book-tickets.component.html',\r\n  styleUrls: ['./book-tickets.component.scss'],\r\n})\r\nexport class BookTicketsComponent implements OnInit {\r\n  selectedSeats: Seat[] = [];\r\n  bookingForms: FormGroup[] = [];\r\n  gender: string;\r\n  genderArray : any =[];\r\n  constructor(private bookingService: BookingService, private fb: FormBuilder, private http: HttpClient, private seatService: SeatService, private router: Router, private authService: AuthService) {}\r\n\r\n  ngOnInit(): void {\r\n    // Get the selected seats data directly from the service\r\n    this.selectedSeats = this.bookingService.getSelectedSeatsData();\r\n    this.initializeForms();\r\n  }\r\n\r\n  initializeForms() {\r\n    this.bookingForms = [];\r\n\r\n    function nameValidator(control: AbstractControl): ValidationErrors | null {\r\n      const name = control.value;\r\n      if (!name || name.length < 3) {\r\n        return { 'minLength': true };\r\n      }\r\n      if (!/^[a-zA-Z\\s]*$/.test(name)) {\r\n        return { 'invalidChars': true };\r\n      }\r\n      return null;\r\n    }\r\n\r\n    this.selectedSeats.forEach((seat) => {\r\n      const isLadiesSeat = seat.seatStatus === 'ladiesSelected';\r\n      const isGentsSeat = seat.seatStatus === 'gentsSelected';\r\n      // console.log(isGentsSeat);\r\n      if (seat.seatStatus !== 'selected'){\r\n        this.gender = isGentsSeat ? 'male' : 'female';\r\n        this.genderArray.push(this.gender);\r\n        // this.bookingService.setGender(this.gender);\r\n      }\r\n      const form = new FormGroup({\r\n        passengerName: new FormControl(seat.passengerName || '', [Validators.required, nameValidator]),\r\n        passengerAge: new FormControl(seat.passengerAge || '', [Validators.required, Validators.min(5), Validators.max(125)]),\r\n        passengerGender: new FormControl({ value: this.gender || '', disabled: isLadiesSeat || isGentsSeat }, Validators.required),\r\n      });\r\n\r\n      this.bookingForms.push(form);\r\n    });\r\n    this.bookingService.setGender(this.genderArray);\r\n  }\r\n\r\n  logout(){\r\n    this.authService.logout();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.bookingForms.every((form) => form.valid)) {\r\n      const passengerDataArray = this.bookingForms.map((form, index) => ({\r\n        seatName: this.selectedSeats[index].name,\r\n        seatPrice: this.selectedSeats[index].seatPrice,\r\n        passengerData: form.value,\r\n      }));\r\n\r\n      // Send passengerDataArray to the server or perform any other required actions\r\n      // console.log(this.bookingForms);  \r\n      this.bookingService.confirmSeats(passengerDataArray);\r\n      this.router.navigate(['/summary'])\r\n\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,SAAS,EAAeC,UAAU,EAAqCC,WAAW,QAAQ,gBAAgB;AAY5G,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/BC,YAAoBC,cAA8B,EAAUC,EAAe,EAAUC,IAAgB,EAAUC,WAAwB,EAAUC,MAAc,EAAUC,WAAwB;IAA7K,KAAAL,cAAc,GAAdA,cAAc;IAA0B,KAAAC,EAAE,GAAFA,EAAE;IAAuB,KAAAC,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,WAAW,GAAXA,WAAW;IAJpL,KAAAC,aAAa,GAAW,EAAE;IAC1B,KAAAC,YAAY,GAAgB,EAAE;IAE9B,KAAAC,WAAW,GAAQ,EAAE;EAC+K;EAEpMC,QAAQA,CAAA;IACN;IACA,IAAI,CAACH,aAAa,GAAG,IAAI,CAACN,cAAc,CAACU,oBAAoB,EAAE;IAC/D,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAA,eAAeA,CAAA;IACb,IAAI,CAACJ,YAAY,GAAG,EAAE;IAEtB,SAASK,aAAaA,CAACC,OAAwB;MAC7C,MAAMC,IAAI,GAAGD,OAAO,CAACE,KAAK;MAC1B,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;QAC5B,OAAO;UAAE,WAAW,EAAE;QAAI,CAAE;;MAE9B,IAAI,CAAC,eAAe,CAACC,IAAI,CAACH,IAAI,CAAC,EAAE;QAC/B,OAAO;UAAE,cAAc,EAAE;QAAI,CAAE;;MAEjC,OAAO,IAAI;IACb;IAEA,IAAI,CAACR,aAAa,CAACY,OAAO,CAAEC,IAAI,IAAI;MAClC,MAAMC,YAAY,GAAGD,IAAI,CAACE,UAAU,KAAK,gBAAgB;MACzD,MAAMC,WAAW,GAAGH,IAAI,CAACE,UAAU,KAAK,eAAe;MACvD;MACA,IAAIF,IAAI,CAACE,UAAU,KAAK,UAAU,EAAC;QACjC,IAAI,CAACE,MAAM,GAAGD,WAAW,GAAG,MAAM,GAAG,QAAQ;QAC7C,IAAI,CAACd,WAAW,CAACgB,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC;QAClC;;;MAEF,MAAME,IAAI,GAAG,IAAI9B,SAAS,CAAC;QACzB+B,aAAa,EAAE,IAAI7B,WAAW,CAACsB,IAAI,CAACO,aAAa,IAAI,EAAE,EAAE,CAAC9B,UAAU,CAAC+B,QAAQ,EAAEf,aAAa,CAAC,CAAC;QAC9FgB,YAAY,EAAE,IAAI/B,WAAW,CAACsB,IAAI,CAACS,YAAY,IAAI,EAAE,EAAE,CAAChC,UAAU,CAAC+B,QAAQ,EAAE/B,UAAU,CAACiC,GAAG,CAAC,CAAC,CAAC,EAAEjC,UAAU,CAACkC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACrHC,eAAe,EAAE,IAAIlC,WAAW,CAAC;UAAEkB,KAAK,EAAE,IAAI,CAACQ,MAAM,IAAI,EAAE;UAAES,QAAQ,EAAEZ,YAAY,IAAIE;QAAW,CAAE,EAAE1B,UAAU,CAAC+B,QAAQ;OAC1H,CAAC;MAEF,IAAI,CAACpB,YAAY,CAACiB,IAAI,CAACC,IAAI,CAAC;IAC9B,CAAC,CAAC;IACF,IAAI,CAACzB,cAAc,CAACiC,SAAS,CAAC,IAAI,CAACzB,WAAW,CAAC;EACjD;EAEA0B,MAAMA,CAAA;IACJ,IAAI,CAAC7B,WAAW,CAAC6B,MAAM,EAAE;EAC3B;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAAC5B,YAAY,CAAC6B,KAAK,CAAEX,IAAI,IAAKA,IAAI,CAACY,KAAK,CAAC,EAAE;MACjD,MAAMC,kBAAkB,GAAG,IAAI,CAAC/B,YAAY,CAACgC,GAAG,CAAC,CAACd,IAAI,EAAEe,KAAK,MAAM;QACjEC,QAAQ,EAAE,IAAI,CAACnC,aAAa,CAACkC,KAAK,CAAC,CAAC1B,IAAI;QACxC4B,SAAS,EAAE,IAAI,CAACpC,aAAa,CAACkC,KAAK,CAAC,CAACE,SAAS;QAC9CC,aAAa,EAAElB,IAAI,CAACV;OACrB,CAAC,CAAC;MAEH;MACA;MACA,IAAI,CAACf,cAAc,CAAC4C,YAAY,CAACN,kBAAkB,CAAC;MACpD,IAAI,CAAClC,MAAM,CAACyC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;;EAGtC;CACD;AAlEY/C,oBAAoB,GAAAgD,UAAA,EALhCpD,SAAS,CAAC;EACTqD,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWnD,oBAAoB,CAkEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}