{"ast":null,"code":"var _class;\nimport { take } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuardService {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, router) {\n    // return true;\n    return this.authService.user.pipe(take(1), map(user => {\n      const isAuth = !!user;\n      const isAdmin = this.authService.getIsAdmin();\n      if (isAuth) {\n        if (isAdmin && route.data.roles && route.data.roles.includes('admin')) {\n          return true; // Admin can access admin routes\n        } else if (!isAdmin && route.data.roles && route.data.roles.includes('user')) {\n          return true; // User can access user routes\n        }\n      }\n\n      return this.router.createUrlTree(['/login']);\n    })\n    // tap(isAuth => {\n    //   if (!isAuth) {\n    //     this.router.navigate(['/auth']);\n    //   }\n    // })\n    );\n  }\n}\n_class = AuthGuardService;\n_class.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["take","map","AuthGuardService","constructor","authService","router","canActivate","route","user","pipe","isAuth","isAdmin","getIsAdmin","data","roles","includes","createUrlTree","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["E:\\Web\\academy-project\\src\\app\\auth\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable, take } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\nimport { map, tap} from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'  \r\n})\r\nexport class AuthGuardService implements CanActivate{\r\n\r\n  constructor(private authService: AuthService, private router: Router) { }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, router: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\r\n    // return true;\r\n    return this.authService.user.pipe(\r\n      take(1),\r\n      map(user => {\r\n        const isAuth = !!user;\r\n        const isAdmin = this.authService.getIsAdmin();\r\n        \r\n        if (isAuth) {\r\n          if (isAdmin && (route.data as any).roles && (route.data as any).roles.includes('admin')) {\r\n            return true; // Admin can access admin routes\r\n          } else if (!isAdmin && (route.data as any).roles && (route.data as any).roles.includes('user')) {\r\n            return true; // User can access user routes\r\n          }\r\n        }\r\n        return this.router.createUrlTree(['/login']);\r\n      })\r\n      // tap(isAuth => {\r\n      //   if (!isAuth) {\r\n      //     this.router.navigate(['/auth']);\r\n      //   }\r\n      // })\r\n    );\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAAqBA,IAAI,QAAQ,MAAM;AAEvC,SAASC,GAAG,QAAY,gBAAgB;;;;AAKxC,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAY;EAExEC,WAAWA,CAACC,KAA6B,EAAEF,MAA2B;IACpE;IACA,OAAO,IAAI,CAACD,WAAW,CAACI,IAAI,CAACC,IAAI,CAC/BT,IAAI,CAAC,CAAC,CAAC,EACPC,GAAG,CAACO,IAAI,IAAG;MACT,MAAME,MAAM,GAAG,CAAC,CAACF,IAAI;MACrB,MAAMG,OAAO,GAAG,IAAI,CAACP,WAAW,CAACQ,UAAU,EAAE;MAE7C,IAAIF,MAAM,EAAE;QACV,IAAIC,OAAO,IAAKJ,KAAK,CAACM,IAAY,CAACC,KAAK,IAAKP,KAAK,CAACM,IAAY,CAACC,KAAK,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE;UACvF,OAAO,IAAI,CAAC,CAAC;SACd,MAAM,IAAI,CAACJ,OAAO,IAAKJ,KAAK,CAACM,IAAY,CAACC,KAAK,IAAKP,KAAK,CAACM,IAAY,CAACC,KAAK,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;UAC9F,OAAO,IAAI,CAAC,CAAC;;;;MAGjB,OAAO,IAAI,CAACV,MAAM,CAACW,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IACD;IACA;IACA;IACA;IACA;KACD;EACH;;SA3BWd,gBAAgB;;mBAAhBA,MAAgB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAhBpB,MAAgB;EAAAqB,OAAA,EAAhBrB,MAAgB,CAAAsB,IAAA;EAAAC,UAAA,EAFf;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}