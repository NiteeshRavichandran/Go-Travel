{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let SeatsComponent = class SeatsComponent {\n  constructor(seatService) {\n    this.seatService = seatService;\n    this.lowerSingleSeats = []; // Initialize with an empty array or default value\n    this.singleUpperBerthSeats = []; // Initialize with an empty array or default value\n    this.doubleLowerBerthSeats = []; // Initialize with an empty array or default value\n    this.doubleUpperBerthSeats = []; // Initialize with an empty array or default value\n  } // Inject the service\n  ngOnInit() {\n    const seatData = this.seatService.getSeatData(); // Get the seat data from the service\n    if (seatData) {\n      this.lowerSingleSeats = this.generateSeats(seatData.LS.length, 'available');\n      this.singleUpperBerthSeats = this.generateSeats(seatData.SUB.length, 'available');\n      this.doubleLowerBerthSeats = this.generateSeats(seatData.DLB.length, 'available');\n      this.doubleUpperBerthSeats = this.generateSeats(seatData.DUB.length, 'available');\n    }\n  }\n  toggleSeatStatus(seat) {\n    if (seat.status === 'available' || seat.status === 'selected') {\n      seat.status = 'booked';\n    } else if (seat.status !== 'booked') {\n      seat.status = 'selected';\n    }\n  }\n};\nSeatsComponent = __decorate([Component({\n  selector: 'app-seats',\n  templateUrl: './seats.component.html',\n  styleUrls: ['./seats.component.css']\n})], SeatsComponent);\n/*\nlowerSingleSeats = this.generateSeats(12, 'available');\nsingleUpperBerthSeats = this.generateSUBerth(6, 'available');\ndoubleLowerBerthSeats = this.generateDUBerth(6, 'available');\ndoubleUpperBerthSeats = this.generateDLBerth(6, 'available');\n\n// Function to generate seat objects\nprivate generateSeats(count: number, status: string): any[] {\n  const seats = [];\n  for (let i = 1; i <= count; i++) {\n    seats.push({ name: `LS${i}`, status: status });\n  }\n  return seats;\n}\n\nprivate generateSUBerth(count: number, status: string): any[] {\n  const SUberth = [];\n  for (let i = 1; i <= count; i++) {\n    SUberth.push({ name: `SUB${i}`, status: status });\n  }\n  return SUberth;\n}\nprivate generateDUBerth(count: number, status: string): any[] {\n  const DUberth = [];\n  for (let i = 1; i <= count; i++) {\n    DUberth.push({ name: `DUB${i}`, status: status });\n  }\n  return DUberth;\n}\nprivate generateDLBerth(count: number, status: string): any[] {\n  const DLberth = [];\n  for (let i = 1; i <= count; i++) {\n    DLberth.push({ name: `DLB${i}`, status: status });\n  }\n  return DLberth;\n}\n\n// Function to toggle seat status\ntoggleSeatStatus(seat: any) {\n  if (seat.status === 'available' || seat.status === 'selected') {\n    seat.status = 'booked';\n  } else if (seat.status !== 'booked') {\n    seat.status = 'selected';\n  }\n}\n\n}\n\n\n\n\n*/","map":{"version":3,"names":["Component","SeatsComponent","constructor","seatService","lowerSingleSeats","singleUpperBerthSeats","doubleLowerBerthSeats","doubleUpperBerthSeats","ngOnInit","seatData","getSeatData","generateSeats","LS","length","SUB","DLB","DUB","toggleSeatStatus","seat","status","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Web\\academy-project\\src\\app\\seats\\seats.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-seats',\r\n  templateUrl: './seats.component.html',\r\n  styleUrls: ['./seats.component.css']\r\n})\r\n\r\nexport class SeatsComponent {\r\n\r\n  constructor(private seatService: SeatService) {} // Inject the service\r\n\r\n  lowerSingleSeats: any[] = []; // Initialize with an empty array or default value\r\n  singleUpperBerthSeats: any[] = []; // Initialize with an empty array or default value\r\n  doubleLowerBerthSeats: any[] = []; // Initialize with an empty array or default value\r\n  doubleUpperBerthSeats: any[] = []; // Initialize with an empty array or default value\r\n\r\n  ngOnInit(): void {\r\n    const seatData = this.seatService.getSeatData(); // Get the seat data from the service\r\n\r\n    if (seatData) {\r\n      this.lowerSingleSeats = this.generateSeats(\r\n        seatData.LS.length,\r\n        'available'\r\n      );\r\n\r\n      this.singleUpperBerthSeats = this.generateSeats(\r\n        seatData.SUB.length,\r\n        'available'\r\n      );\r\n\r\n      this.doubleLowerBerthSeats = this.generateSeats(\r\n        seatData.DLB.length,\r\n        'available'\r\n      );\r\n\r\n      this.doubleUpperBerthSeats = this.generateSeats(\r\n        seatData.DUB.length,\r\n        'available'\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  toggleSeatStatus(seat: any) {\r\n    if (seat.status === 'available' || seat.status === 'selected') {\r\n      seat.status = 'booked';\r\n    } else if (seat.status !== 'booked') {\r\n      seat.status = 'selected';\r\n    }\r\n  }\r\n}\r\n  /*\r\n  lowerSingleSeats = this.generateSeats(12, 'available');\r\n  singleUpperBerthSeats = this.generateSUBerth(6, 'available');\r\n  doubleLowerBerthSeats = this.generateDUBerth(6, 'available');\r\n  doubleUpperBerthSeats = this.generateDLBerth(6, 'available');\r\n\r\n  // Function to generate seat objects\r\n  private generateSeats(count: number, status: string): any[] {\r\n    const seats = [];\r\n    for (let i = 1; i <= count; i++) {\r\n      seats.push({ name: `LS${i}`, status: status });\r\n    }\r\n    return seats;\r\n  }\r\n  \r\n  private generateSUBerth(count: number, status: string): any[] {\r\n    const SUberth = [];\r\n    for (let i = 1; i <= count; i++) {\r\n      SUberth.push({ name: `SUB${i}`, status: status });\r\n    }\r\n    return SUberth;\r\n  }\r\n  private generateDUBerth(count: number, status: string): any[] {\r\n    const DUberth = [];\r\n    for (let i = 1; i <= count; i++) {\r\n      DUberth.push({ name: `DUB${i}`, status: status });\r\n    }\r\n    return DUberth;\r\n  }\r\n  private generateDLBerth(count: number, status: string): any[] {\r\n    const DLberth = [];\r\n    for (let i = 1; i <= count; i++) {\r\n      DLberth.push({ name: `DLB${i}`, status: status });\r\n    }\r\n    return DLberth;\r\n  }\r\n\r\n  // Function to toggle seat status\r\n  toggleSeatStatus(seat: any) {\r\n    if (seat.status === 'available' || seat.status === 'selected') {\r\n      seat.status = 'booked';\r\n    } else if (seat.status !== 'booked') {\r\n      seat.status = 'selected';\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n*/"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAEzBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAE/B,KAAAC,gBAAgB,GAAU,EAAE,CAAC,CAAC;IAC9B,KAAAC,qBAAqB,GAAU,EAAE,CAAC,CAAC;IACnC,KAAAC,qBAAqB,GAAU,EAAE,CAAC,CAAC;IACnC,KAAAC,qBAAqB,GAAU,EAAE,CAAC,CAAC;EALY,CAAC,CAAC;EAOjDC,QAAQA,CAAA;IACN,MAAMC,QAAQ,GAAG,IAAI,CAACN,WAAW,CAACO,WAAW,EAAE,CAAC,CAAC;IAEjD,IAAID,QAAQ,EAAE;MACZ,IAAI,CAACL,gBAAgB,GAAG,IAAI,CAACO,aAAa,CACxCF,QAAQ,CAACG,EAAE,CAACC,MAAM,EAClB,WAAW,CACZ;MAED,IAAI,CAACR,qBAAqB,GAAG,IAAI,CAACM,aAAa,CAC7CF,QAAQ,CAACK,GAAG,CAACD,MAAM,EACnB,WAAW,CACZ;MAED,IAAI,CAACP,qBAAqB,GAAG,IAAI,CAACK,aAAa,CAC7CF,QAAQ,CAACM,GAAG,CAACF,MAAM,EACnB,WAAW,CACZ;MAED,IAAI,CAACN,qBAAqB,GAAG,IAAI,CAACI,aAAa,CAC7CF,QAAQ,CAACO,GAAG,CAACH,MAAM,EACnB,WAAW,CACZ;;EAEL;EAGAI,gBAAgBA,CAACC,IAAS;IACxB,IAAIA,IAAI,CAACC,MAAM,KAAK,WAAW,IAAID,IAAI,CAACC,MAAM,KAAK,UAAU,EAAE;MAC7DD,IAAI,CAACC,MAAM,GAAG,QAAQ;KACvB,MAAM,IAAID,IAAI,CAACC,MAAM,KAAK,QAAQ,EAAE;MACnCD,IAAI,CAACC,MAAM,GAAG,UAAU;;EAE5B;CACD;AA3CYlB,cAAc,GAAAmB,UAAA,EAN1BpB,SAAS,CAAC;EACTqB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EAEWtB,cAAc,CA2C1B;AACC"},"metadata":{},"sourceType":"module","externalDependencies":[]}