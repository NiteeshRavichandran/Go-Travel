{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let SignUpComponent = class SignUpComponent {\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n  matchConfirmPassword(control) {\n    if (control.value !== this.signUp.get('password').value) {\n      return {\n        passwordMismatch: true\n      };\n    }\n    return null;\n  }\n  ngOnInit() {\n    this.signUp = new FormGroup({\n      username: new FormControl(null, [Validators.email, Validators.required]),\n      password: new FormControl(null, [Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!])[a-zA-Z0-9@#$%^&+=!]{8,}$'), Validators.required]),\n      confirmpassword: new FormControl(null)\n    });\n    this.signUp.get('confirmpassword').setValidators([Validators.required, this.matchConfirmPassword.bind(this)]);\n  }\n  onSubmit() {\n    if (this.signUp.valid) {\n      const email = this.signUp.value.username;\n      const password = this.signUp.value.password;\n      this.authService.signUp(email, password).subscribe(resData => {\n        // console.log(resData); \n        this.router.navigate(['/']);\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n};\nSignUpComponent = __decorate([Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss']\n})], SignUpComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","SignUpComponent","constructor","router","authService","matchConfirmPassword","control","value","signUp","get","passwordMismatch","ngOnInit","username","email","required","password","pattern","confirmpassword","setValidators","bind","onSubmit","valid","subscribe","resData","navigate","error","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Web\\academy-project\\src\\app\\sign-up\\sign-up.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss']\r\n})\r\nexport class SignUpComponent {\r\n  constructor(private router: Router,private authService: AuthService){}\r\n  signUp!: FormGroup;\r\n\r\n  matchConfirmPassword(control: FormControl): { [s: string]: boolean } {\r\n    if (control.value !== this.signUp.get('password').value) {\r\n      return { passwordMismatch: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  ngOnInit(){\r\n  this.signUp = new FormGroup({\r\n    username: new FormControl(null,[Validators.email,Validators.required]),\r\n    password: new FormControl(null,[Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!])[a-zA-Z0-9@#$%^&+=!]{8,}$'),Validators.required]),\r\n    confirmpassword: new FormControl(null)\r\n  });\r\n\r\n  this.signUp\r\n      .get('confirmpassword')\r\n      .setValidators([\r\n        Validators.required,\r\n        this.matchConfirmPassword.bind(this),\r\n      ]);\r\n\r\n}\r\nonSubmit() {\r\n  if(this.signUp.valid){\r\n    const email = this.signUp.value.username;\r\n      const password = this.signUp.value.password;\r\n\r\n      this.authService.signUp(email, password).subscribe(resData => {\r\n        // console.log(resData); \r\n        this.router.navigate(['/']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        \r\n      }\r\n      );\r\n  }\r\n}\r\n\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAC1BC,YAAoBC,MAAc,EAASC,WAAwB;IAA/C,KAAAD,MAAM,GAANA,MAAM;IAAiB,KAAAC,WAAW,GAAXA,WAAW;EAAe;EAGrEC,oBAAoBA,CAACC,OAAoB;IACvC,IAAIA,OAAO,CAACC,KAAK,KAAK,IAAI,CAACC,MAAM,CAACC,GAAG,CAAC,UAAU,CAAC,CAACF,KAAK,EAAE;MACvD,OAAO;QAAEG,gBAAgB,EAAE;MAAI,CAAE;;IAEnC,OAAO,IAAI;EACb;EAEAC,QAAQA,CAAA;IACR,IAAI,CAACH,MAAM,GAAG,IAAIV,SAAS,CAAC;MAC1Bc,QAAQ,EAAE,IAAIb,WAAW,CAAC,IAAI,EAAC,CAACC,UAAU,CAACa,KAAK,EAACb,UAAU,CAACc,QAAQ,CAAC,CAAC;MACtEC,QAAQ,EAAE,IAAIhB,WAAW,CAAC,IAAI,EAAC,CAACC,UAAU,CAACgB,OAAO,CAAC,2EAA2E,CAAC,EAAChB,UAAU,CAACc,QAAQ,CAAC,CAAC;MACrJG,eAAe,EAAE,IAAIlB,WAAW,CAAC,IAAI;KACtC,CAAC;IAEF,IAAI,CAACS,MAAM,CACNC,GAAG,CAAC,iBAAiB,CAAC,CACtBS,aAAa,CAAC,CACblB,UAAU,CAACc,QAAQ,EACnB,IAAI,CAACT,oBAAoB,CAACc,IAAI,CAAC,IAAI,CAAC,CACrC,CAAC;EAER;EACAC,QAAQA,CAAA;IACN,IAAG,IAAI,CAACZ,MAAM,CAACa,KAAK,EAAC;MACnB,MAAMR,KAAK,GAAG,IAAI,CAACL,MAAM,CAACD,KAAK,CAACK,QAAQ;MACtC,MAAMG,QAAQ,GAAG,IAAI,CAACP,MAAM,CAACD,KAAK,CAACQ,QAAQ;MAE3C,IAAI,CAACX,WAAW,CAACI,MAAM,CAACK,KAAK,EAAEE,QAAQ,CAAC,CAACO,SAAS,CAACC,OAAO,IAAG;QAC3D;QACA,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7B,CAAC,EACDC,KAAK,IAAG;QACNC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAEpB,CAAC,CACA;;EAEP;CAEC;AA3CYxB,eAAe,GAAA2B,UAAA,EAL3B/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW9B,eAAe,CA2C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}