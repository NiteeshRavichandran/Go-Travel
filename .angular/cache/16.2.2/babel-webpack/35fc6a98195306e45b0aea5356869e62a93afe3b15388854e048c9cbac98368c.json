{"ast":null,"code":"var _class;\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport { User } from '../models/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  signIn(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  signUp(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem('userData'));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      this.user.next(loadedUser);\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/login']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    // localStorage.setItem('userData', JSON.stringify(user));\n  }\n\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    // console.log(JSON.stringify(errorRes, null, 2));\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'INVALID_LOGIN_CREDENTIALS':\n        errorMessage = 'Enter Valid Credentials';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","catchError","tap","throwError","User","AuthService","constructor","http","router","user","signIn","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","signUp","autoLogin","userData","JSON","parse","localStorage","getItem","loadedUser","id","_token","Date","_tokenExpirationDate","token","next","expirationDuration","getTime","autoLogout","logout","navigate","removeItem","tokenExpirationTimer","clearTimeout","setTimeout","userId","expirationDate","errorRes","errorMessage","error","message","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["E:\\Web\\academy-project\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http'\r\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../models/user.model';\r\n\r\n\r\ninterface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  registered?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'  \r\n})\r\n\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User>(null);\r\n  private tokenExpirationTimer: any;\r\n  \r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n\r\n\r\n  signIn(email: string, password: string){\r\n    return this.http.post <AuthResponseData>(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego',\r\n      {\r\n        email: email, \r\n        password: password,\r\n        returnSecureToken: true\r\n      }\r\n    ).pipe(\r\n      catchError(this.handleError),\r\n      tap(resData => {\r\n        this.handleAuthentication(\r\n          resData.email,\r\n          resData.localId,\r\n          resData.idToken,\r\n          +resData.expiresIn\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  signUp(email: string, password: string){\r\n    return this.http.post <AuthResponseData>(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego',\r\n      {\r\n        email: email, \r\n        password: password,\r\n        returnSecureToken: true\r\n      }\r\n    ).pipe(\r\n      catchError(this.handleError),\r\n      tap(resData => {\r\n        this.handleAuthentication(\r\n          resData.email,\r\n          resData.localId,\r\n          resData.idToken,\r\n          +resData.expiresIn\r\n        );\r\n      })\r\n    );\r\n  }\r\n  \r\n\r\n  autoLogin() {\r\n    const userData: {\r\n      email: string;\r\n      id: string;\r\n      _token: string;\r\n      _tokenExpirationDate: string;\r\n    } = JSON.parse(localStorage.getItem('userData'));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n\r\n    const loadedUser = new User(\r\n      userData.email,\r\n      userData.id,\r\n      userData._token,\r\n      new Date(userData._tokenExpirationDate)\r\n    );\r\n\r\n    if (loadedUser.token) {\r\n      this.user.next(loadedUser);\r\n      const expirationDuration =\r\n        new Date(userData._tokenExpirationDate).getTime() -\r\n        new Date().getTime();\r\n      this.autoLogout(expirationDuration);\r\n    }\r\n  }\r\n\r\n  logout() {\r\n    this.user.next(null);\r\n    this.router.navigate(['/login']);\r\n    localStorage.removeItem('userData');\r\n    if (this.tokenExpirationTimer) {\r\n      clearTimeout(this.tokenExpirationTimer);\r\n    }\r\n    this.tokenExpirationTimer = null;\r\n  }\r\n\r\n  autoLogout(expirationDuration: number) {\r\n    this.tokenExpirationTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, expirationDuration);\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n    this.autoLogout(expiresIn * 1000);\r\n    // localStorage.setItem('userData', JSON.stringify(user));\r\n  }\r\n\r\n  private handleError(errorRes: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (!errorRes.error || !errorRes.error.error) {\r\n      return throwError(errorMessage);\r\n    }\r\n    // console.log(JSON.stringify(errorRes, null, 2));\r\n\r\n    switch (errorRes.error.error.message) {\r\n      case 'EMAIL_EXISTS':\r\n        errorMessage = 'This email exists already';\r\n        break;\r\n      \r\n      case 'INVALID_LOGIN_CREDENTIALS':\r\n        errorMessage = 'Enter Valid Credentials';\r\n        break;\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}