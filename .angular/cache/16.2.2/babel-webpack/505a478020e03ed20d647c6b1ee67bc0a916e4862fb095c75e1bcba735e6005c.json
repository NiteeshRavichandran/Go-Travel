{"ast":null,"code":"var _class;\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new BehaviorSubject(null);\n    this.admin = false;\n  }\n  signIn(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  signUp(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  itsAdmin() {\n    this.admin = true;\n  }\n  isAdmin() {\n    return this.admin;\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = 'An unknown error occurred!';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'This email exists already';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(errorMessage);\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","catchError","tap","throwError","AuthService","constructor","http","user","admin","signIn","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","signUp","itsAdmin","isAdmin","userId","token","expirationDate","Date","getTime","User","next","autoLogout","localStorage","setItem","JSON","stringify","errorRes","errorMessage","error","message","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Web\\academy-project\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpClientModule, HttpErrorResponse } from '@angular/common/http'\r\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\r\n\r\n\r\ninterface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  registered?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'  \r\n})\r\n\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User>(null);\r\n  private tokenExpirationTimer: any;\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  admin = false;\r\n\r\n  signIn(email: string, password: string){\r\n    return this.http.post <AuthResponseData>(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego',\r\n      {\r\n        email: email, \r\n        password: password,\r\n        returnSecureToken: true\r\n      }\r\n    ).pipe(\r\n      catchError(this.handleError),\r\n      tap(resData => {\r\n        this.handleAuthentication(\r\n          resData.email,\r\n          resData.localId,\r\n          resData.idToken,\r\n          +resData.expiresIn\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  signUp(email: string, password: string){\r\n    return this.http.post <AuthResponseData>(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyADtZEc4w86x68BlWNOnucEwg1HbBO0Ego',\r\n      {\r\n        email: email, \r\n        password: password,\r\n        returnSecureToken: true\r\n      }\r\n    ).pipe(\r\n      catchError(this.handleError),\r\n      tap(resData => {\r\n        this.handleAuthentication(\r\n          resData.email,\r\n          resData.localId,\r\n          resData.idToken,\r\n          +resData.expiresIn\r\n        );\r\n      })\r\n    );\r\n  }\r\n  \r\n  itsAdmin(){\r\n    this.admin = true;\r\n  }\r\n\r\n  isAdmin(){\r\n    return this.admin;\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n    this.autoLogout(expiresIn * 1000);\r\n    localStorage.setItem('userData', JSON.stringify(user));\r\n  }\r\n\r\n  private handleError(errorRes: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (!errorRes.error || !errorRes.error.error) {\r\n      return throwError(errorMessage);\r\n    }\r\n    switch (errorRes.error.error.message) {\r\n      case 'EMAIL_EXISTS':\r\n        errorMessage = 'This email exists already';\r\n        break;\r\n      case 'EMAIL_NOT_FOUND':\r\n        errorMessage = 'This email does not exist.';\r\n        break;\r\n      case 'INVALID_PASSWORD':\r\n        errorMessage = 'This password is not correct.';\r\n        break;\r\n    }\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}